// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// asset/index.html
// asset/styles.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xb1\x4e\xc3\x30\x10\xdd\xf9\x8a\xa3\xdd\x90\xac\x93\xd2\x4e\xe1\xc8\x02\xcc\x30\xb0\x30\xba\xb6\xd3\x58\x71\x73\x28\xbe\x54\x8a\x10\xff\x8e\x1c\x0f\x4d\x1a\x60\xc0\x37\xd8\xef\xfc\xf4\xec\xf7\x74\x74\xfb\xf4\xf2\xf8\xf6\xfe\xfa\x0c\x8d\x9c\x42\x75\x43\x79\x03\x00\xa0\xc6\x69\x9b\x8f\x13\x14\x2f\xc1\x55\xe2\x4d\x2b\x6c\x5a\xc2\x8c\x2f\xf7\x51\xc6\x39\x4e\xeb\xc0\x76\x84\xcf\x45\x6b\x6a\x6b\xd3\x1e\x7b\x1e\x3a\x5b\xc2\x76\xe7\x52\x2d\x38\x5f\x0b\x74\xf7\x83\x42\xcd\x9d\xa8\x5a\x9f\x7c\x18\x4b\x88\xba\x8b\x2a\xba\xde\xd7\xf7\x2b\xa2\xe1\xc0\x7d\x09\x5b\xe3\x52\xfd\xf2\x0a\xe1\xec\xef\x84\x17\xdf\x94\x0c\xcc\x2c\x5a\x7f\x06\x13\x74\x8c\x0f\x9b\x8f\xa1\x77\xea\xb8\x59\xfa\x5d\x11\x06\x55\xa8\xdd\x15\x29\x67\x5b\x4c\x49\x42\x8a\x12\x6a\x66\xc2\xa6\xb8\xd2\x42\xeb\xcf\xff\x96\xdf\x57\x87\x41\x84\xbb\x48\xd8\xec\xff\x14\x9e\x41\xc2\xec\x97\x30\x4f\xc1\x77\x00\x00\x00\xff\xff\xfc\x62\xbb\x45\x1d\x02\x00\x00")

func assetIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetIndexHtml,
		"asset/index.html",
	)
}

func assetIndexHtml() (*asset, error) {
	bytes, err := assetIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset/index.html", size: 541, mode: os.FileMode(420), modTime: time.Unix(1534694889, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetStylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\x4f\xa9\x54\xa8\xe6\x52\x50\x50\x50\x48\x4a\x4c\xce\x4e\x2f\xca\x2f\xcd\x4b\xb1\x52\x50\x36\x4e\x05\x41\x6b\xae\x5a\x2e\x2d\xa8\x74\x5a\x7e\x5e\x89\x6e\x5a\x62\x6e\x66\x4e\xa5\x95\x42\x71\x62\x5e\xb1\x6e\x71\x6a\x51\x66\x1a\x48\x09\x57\x86\x11\x54\x51\x72\x7e\x4e\x7e\x91\x95\x82\x72\x62\x2a\x08\x82\xe4\x00\x01\x00\x00\xff\xff\x78\xa0\x11\x55\x61\x00\x00\x00")

func assetStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_assetStylesCss,
		"asset/styles.css",
	)
}

func assetStylesCss() (*asset, error) {
	bytes, err := assetStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset/styles.css", size: 97, mode: os.FileMode(420), modTime: time.Unix(1534694143, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset/index.html": assetIndexHtml,
	"asset/styles.css": assetStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetIndexHtml, map[string]*bintree{}},
		"styles.css": &bintree{assetStylesCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

